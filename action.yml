name: 'Build SELinux module DEB package'
description: 'Build DEB packaged SELinux modules on targeted OS'

branding:
  color:  green
  icon: package

inputs:
  distro:
    description: 'Name of the GNU/Linux distribution, i.e. `ubuntu` or `debian`.'
    required: true
  distro_version:
    description: 'Version number or name of the GNU/Linux distribution'
    required: true
  platform:
    description: 'Platform name, i.e. `amd64` (default) or `i386`.'
    required: false
    default: 'amd64'

  source_repo_location:
    description: 'Provides the directory where the source repository was checked out'
    required: true
    default: 'SOURCE_REPO'
  build_material_dir:
    description: 'Provides the relative path (in the source repository) where the Makefile and the control, changelog and copyright files are located.'
    required: false
    default: 'dpkg'
  package_version:
    description: 'Version of package to build.'
    required: true
  output_dir:
    description: 'Provides the directory name where built packages should be placed.'
    required: true
    default: 'artifacts'
  gpg_key_name:
    description: 'GPG pretty name of the key'
    required: false
    default: ''
  gpg_key_id:
    description: 'GPG pretty name of the key'
    required: true
  gpg_private_key_file:
    description: 'GPG key file'
    required: true

runs:
  using: 'composite'

  steps:
    - name: Verify inputs
      shell: bash
      run: |
        grep -qE '^(ubuntu|debian)$' <<< "${{ inputs.distro }}"
        if [ $? -ne 0 ]
        then
          echo '::error::Distribution must be either debian or ubuntu.'
          exit 1
        fi

        grep -qEi '^[a-z0-9_.-]+/?$' <<< '${{inputs.source_repo_location}}'
        if [ $? -ne 0 ]
        then
          echo '::error::Illegal character(s) detected in `source_repo_location`.'
          exit 1
        fi

        grep -qEi '^[a-z0-9_.-]+/?$' <<< '${{inputs.build_material_dir}}'
        if [ $? -ne 0 ]
        then
          echo '::error::Illegal character(s) detected in `build_material_dir`.'
          exit 1
        fi

        grep -qEi '^[a-z0-9_.-]+/?$' <<< '${{inputs.output_dir}}'
        if [ $? -ne 0 ]
        then
          echo '::error::Illegal character(s) detected in `output_dir`.'
          exit 1
        fi

    - name: Prepare package build workspace
      shell: bash
      run: |
        SOURCE_DIR="${{github.workspace}}/${{inputs.source_repo_location}}"
        SOURCE_DIR_docker="/source/${{inputs.source_repo_location}}"
        DATE=$( date -R )

        if [ ! -d "${SOURCE_DIR}" ]
        then
          echo "::error::'source_dir' (${SOURCE_DIR}) has to be a subdirectory of the current workdir !"
          exit 2
        fi

        if [ -d "${SOURCE_DIR}/${INPUT_BUILD_MATERIAL_DIR}" ]
        then
          echo "::debug:: Inspecting content of '${SOURCE_DIR}/${INPUT_BUILD_MATERIAL_DIR}'."
          for package in ${SOURCE_DIR}/${INPUT_BUILD_MATERIAL_DIR}/*
          do
            package=$( basename ${package} )
            SOURCE_PKG_DIR=${SOURCE_DIR}/${INPUT_BUILD_MATERIAL_DIR}/${package}
            BUILDDIR=${{github.workspace}}/build/${package}-${INPUT_PKG_VERSION}
            BUILDDIR_docker=/source/build/${package}-${INPUT_PKG_VERSION}

            if [ -d "${SOURCE_PKG_DIR}" -a -f "${SOURCE_PKG_DIR}/control" ]
            then
              echo "::notice:: Found a control file in '${package}' subdirectory."
              if [ -f ${SOURCE_PKG_DIR}/Makefile ]
              then
                mkdir -m 0755 -p ${BUILDDIR}/debian ${{github.workspace}}/${INPUT_RESULT_DIR}

                sed -e "s/%version%/${INPUT_PKG_VERSION}/g" \
                  -e "s/%name%/${package}/g" \
                  -e "s:%sourcedir%:${SOURCE_DIR_docker}:g" \
                  -e "s:%builddir%:${BUILDDIR_docker}:g" \
                  ${SOURCE_PKG_DIR}/Makefile > ${BUILDDIR}/Makefile

                sed -e "s/%version%/${INPUT_PKG_VERSION}/g" \
                  -e "s/%name%/${package}/g" \
                  -e "s:%sourcedir%:${SOURCE_DIR_docker}:g" \
                  -e "s:%builddir%:${BUILDDIR_docker}:g" \
                  ${SOURCE_PKG_DIR}/control > ${BUILDDIR}/debian/control

                sed -e "s/%version%/${INPUT_PKG_VERSION}/g" \
                  -e "s/%name%/${package}/g" \
                  -e "s/%date%/${DATE}/g" \
                  ${SOURCE_PKG_DIR}/changelog > ${BUILDDIR}/debian/changelog

                for file in preinst postinst prerm postrm rules
                do
                  if [ -f ${SOURCE_PKG_DIR}/$file ]
                  then
                    cp ${SOURCE_PKG_DIR}/$file ${BUILDDIR}/debian/
                    chmod 0755  ${BUILDDIR}/debian/$(basename $file)
                  fi
                done
              else
                echo "::error::Makefile not found for package '${package}'."
                exit 2
              fi
            else
              if [ -d "${SOURCE_PKG_DIR}" ]
              then
                echo "::notice::Subdirectory '${package}' ignored: no control file found."
              fi
            fi
          done
        else
          echo "::error::'build_material_dir' does not exist in the source repository."
          exit 2
        fi
      working-directory: ${{github.workspace}}
      env:
        INPUT_BUILD_MATERIAL_DIR: "${{inputs.build_material_dir}}"
        INPUT_PKG_VERSION: "${{inputs.package_version}}"
        INPUT_RESULT_DIR: "${{inputs.result_dir}}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: ${{github.action_path}}
        push: false
        tags: LHQG/${{ inputs.distro }}-${{ inputs.distro_version }}-${{ inputs.platform }}:latest
        cache-from: type=gha
        cache-to: type=gha
        outputs: type=docker
        platforms: ${{inputs.platform}}
        build-args: |
          DISTRIBUTION=${{inputs.distro}}
          DISTRO_VERSN=${{inputs.distro_version}}
          PLATFORM=${{inputs.platform}}

    - name: Build DEB package in docker image
      shell: bash
      run: |
        docker run --platform="${{inputs.platform}}" \
          -v "/var/run/docker.sock":"/var/run/docker.sock" \
          -v "${{github.workspace}}":/source \
          --env INPUT_BUILDROOT \
          --env INPUT_OUTPUT_DIR \
          --env INPUT_PKG_VERSION \
          --env INPUT_SIGNING_KEY_NAME \
          --env INPUT_SIGNING_KEY_ID \
          --env INPUT_SIGNING_KEY_FILE \
          --workdir /source "${IMAGE_NAME}"
      working-directory: ${{github.workspace}}
      env:
        INPUT_BUILDROOT: build
        INPUT_OUTPUT_DIR: "${{inputs.output_dir}}"
        INPUT_PKG_VERSION: "${{inputs.package_version}}"
        INPUT_SIGNING_KEY_NAME: "${{inputs.gpg_key_name}}"
        INPUT_SIGNING_KEY_ID: "${{inputs.gpg_key_id}}"
        INPUT_SIGNING_KEY_FILE: "${{inputs.gpg_private_key_file}}"
        IMAGE_NAME: "LHQG/${{ inputs.distro }}-${{ inputs.distro_version }}-${{ inputs.platform }}:latest"
